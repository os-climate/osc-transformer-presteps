---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "🧱 Python Build"
description: "Builds a Python Project"

inputs:
  PURGE_OUTPUT_PATH:
    description: "Purge target artefact path prior to builds"
    required: false
    default: false
  ARTEFACT_PATH:
    description: "Build artefacts will be output to this folder/directory"
    required: false
    type: string
    default: "dist"
  BUILD_TAG:
    description: "Tag version/name for this specific build (semantic)"
    required: false
    type: string
  SIGSTORE_SIGN:
    description: "Sign build artefacts with Sigstore"
    required: false
    type: boolean
    default: true

outputs:
  MATRIX_JSON:
    description: "Project supported Python versions as JSON"
    value: ${{ steps.project-setup.outputs.matrix_json }}
  ARTEFACT_NAME:
    description: "Build artefacts will be output to this folder/directory"
    value: ${{ steps.project-setup.outputs.python_project_name }}
  ARTEFACT_PATH:
    description: "Build artefacts will be output to this folder/directory"
    value: ${{ steps.project-setup.outputs.matrix_json }}

runs:
  using: "composite"
  steps:
    # First action performs repository checkout
    - name: "Python project setup"
      id: project-setup
      uses: os-climate/osc-github-devops/.github/actions/python-project-setup@main

    - name: "Set up Python ${{ inputs.build_python_version }}"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: ${{ env.build_python_version }}

    - name: "Install PDM tooling"
      # yamllint disable-line rule:line-length
      uses: pdm-project/setup-pdm@b2472ca4258a9ea3aee813980a0100a2261a42fc # v4.2
      with:
        python-version-file: "pyproject.toml"

    - name: "Build versioning"
      id: versioning
      if: inputs.build_tag
      shell: bash
      run: |
        # Explicit build versioning
        echo "Explicit build versioning: ${{ inputs.build_tag }}"
        echo "build_tag=${{ inputs.build_tag }}" >> "$GITHUB_ENV"

    - name: "Patch project versioning metadata"
      if: env.python_project_version != inputs.build_tag
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/python-project-version-patch@main
      with:
        replacement_version: ${{ env.build_tag }}

    - name: "Build Python project"
      id: perform-build
      shell: bash
      run: |
        # Build Python project

        # Set build parameters/variables
        echo "Action triggered by: ${GITHUB_TRIGGERING_ACTOR}"
        datetime=$(date +'%Y-%m-%d-%H%M')
        echo "Build date and time stamp: $datetime"
        echo "datetime=$datetime" >> "$GITHUB_ENV"
        echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"

        if [ ${{ inputs.PURGE_OUTPUT_PATH }} ] && \
           [ -d ${{ inputs.ARTEFACT_PATH }} ]; then
          echo "Purging artefact output path prior to build ⚠️"
          echo "Path: ${{ inputs.ARTEFACT_PATH }}"
          rm -Rf ${{ inputs.ARTEFACT_PATH }}/*
        fi

        python -m pip install --disable-pip-version-check -q --upgrade pip
        if [ -f pyproject.toml ]; then
          echo "Found file: pyproject.toml"
          echo "Building with command: pdm build --dest ${{ inputs.ARTEFACT_PATH }}"
          pdm build --dest ${{ inputs.ARTEFACT_PATH }}
        elif [ -f tox.ini ]; then
          echo "Found TOX configuration file: tox.ini"
          echo "Attempting to install TOX..."
          python -m pip install --disable-pip-version-check -q --upgrade tox tox-gh-actions
          echo "Attempting build with: tox -e build"
          echo "WARNING: assumes build artefact path is valid"
          tox -e build
        else
          echo "Neither file found: tox.ini/pyproject.toml"
          echo "Attempting build with: python -m build"
          python -m pip install --disable-pip-version-check -q --upgrade build
          python -m build --outdir ${{ inputs.ARTEFACT_PATH }}
        fi

    - name: "Package dependency graph"
      shell: bash
      run: |
        # Package dependency graph
        pdm list --graph

    - name: "Artefact attestation for: ${{ inputs.ARTEFACT_PATH }}"
      uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
      with:
        subject-path: ${{ inputs.ARTEFACT_PATH }}/*

    - name: "Validate artefacts with Twine"
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/python-twine-check@main

    # This step optional and must be explicitly requested (passed the relevant input)
    - name: "Sign packages with SigStore"
      # yamllint disable-line rule:line-length
      uses: sigstore/gh-action-sigstore-python@f514d46b907ebcd5bedc05145c03b69c1edd8b46 # v3.0.0
      if: inputs.SIGSTORE_SIGN
      env:
        package-path: ${{ inputs.ARTEFACT_PATH }}
      with:
        inputs: >-
          ./${{ inputs.ARTEFACT_PATH }}/*.tar.gz
          ./${{ inputs.ARTEFACT_PATH }}/*.whl

    - name: "Upload build artefacts"
      # yamllint disable-line rule:line-length
      uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
      with:
        name: ${{ env.python_project_name }}
        path: ${{ inputs.ARTEFACT_PATH }}
        if-no-files-found: error

    - name: "Set build output variables"
      shell: bash
      run: |
        # Set build output variables
        echo "artefact_name=${{ env.python_project_name }}" >> "$GITHUB_OUTPUT"
        echo "artefact_path=${{ inputs.ARTEFACT_PATH }}" >> "$GITHUB_OUTPUT"
        echo "Artefact name: ${{ env.python_project_name }}"
        echo "Artefact path: ${{ inputs.ARTEFACT_PATH }}"
        echo "Build successful ✅"
