---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

name: "📦 PyPI Publish Package"
description: "Publishes a Python package to PyPI"

inputs:
  ENVIRONMENT:
    # Environment MUST match the trusted publishing setup in PyPI, if defined
    description: "Mandatory environment, e.g. development, production"
    type: string
    required: false
    default: "test"
  BUILD_TAG:
    description: "Semantic tag for this release/build"
    type: string
    required: true
  ARTEFACT_LOCATION:
    description: "Path/location for build artefacts"
    type: string
    required: false
    default: "dist"
  ONE_PASSWORD_ITEM:
    description: "Path to 1Password vault credential for PyPI"
    type: string
    required: false
  OP_SERVICE_ACCOUNT_TOKEN:
    description: "1Password service account credential to access vault"
    required: false
  PYPI_CREDENTIAL:
    description: "PyPI API credential from GitHub secrets"
    required: false

runs:
  using: "composite"
  steps:
    # Need repository content to extract project name
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Extract project/repository naming"
      id: naming
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/python-get-project-name-action@main

    - name: "⬇ Download build artefacts"
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: ${{ env.python_project_name }}
        path: ${{ inputs.artefact_location }}

    - name: "Set publishing parameters"
      id: parameters
      shell: bash
      run: |
        # Set publishing parameters
        if [ ${{ inputs.ENVIRONMENT }} = "test" ] || \
        [ ${{ inputs.ENVIRONMENT }} = "testing" ] || \
        [ ${{ inputs.ENVIRONMENT }} = "staging" ] || \
        [ ${{ inputs.ENVIRONMENT }} = "development" ]; then
          echo "base_url=https://test.pypi.org" >> "$GITHUB_ENV"
          echo "publish_url=https://test.pypi.org/legacy/" >> "$GITHUB_ENV"
        else
          echo "base_url=https://pypi.org" >> "$GITHUB_ENV"
          echo "publish_url=https://upload.pypi.org/legacy/" >> "$GITHUB_ENV"
        fi

    - name: "Remove unsupported artefact file types"
      id: files
      shell: bash
      run: |
        # Remove unsupported artefact file types
        if [ ! -d  ${{ inputs.artefact_location }} ]; then
          echo "Early exit; build artefacts path NOT found:  ${{ inputs.artefact_location }}"
          exit 0
        fi
        if [ -f  ${{ inputs.artefact_location }}/buildvars.txt ]; then
          rm ${{ inputs.artefact_location }}/buildvars.txt
        else
          echo "No buildvars.txt file to purge"
        fi
        # Remove outputs related to SigStore signing
        if test -n "$(find ${{ inputs.artefact_location }} -maxdepth 1 -name '*.sigstore*' -print -quit)"
        then
          echo "Found SigStore signing artefacts to purge"
          rm  ${{ inputs.artefact_location }}/*.sigstore*
        else
          echo "No SigStore signing artefacts to purge"
        fi

    - name: "Checking package index for build/release"
      id: check-package-index
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/pypi-version-check-action@main
      with:
        index_url: "${{ env.base_url }}/simple"
        package_name: "${{ steps.naming.outputs.python_project_name }}"
        package_version: "${{ inputs.build_tag }}"
        environment: ${{ inputs.ENVIRONMENT }}

    - name: "Determine publishing method"
      id: conditions
      shell: bash
      run: |
        # Determine publishing method

        if [ "${{ steps.check-package-index.outputs.package_match }}" = "true" ]; then
          echo "Project has previously been published ✅"
          publish_method="Trusted Publishing"
        fi

        if [ "${{ steps.check-package-index.outputs.version_match }}" != 'true' ]; then
          echo "This build/release has NOT previously been published ✅"
        fi

        # ToDo: remove line below when supporting reusable workflows
        if [ "$publish_method" = "Trusted Publishing" ]; then
        #  echo "⚠️ Trusting published is temporarily disabled"
        #  publish_method="Trusted Publishing Bypassed"
        #else
          echo "Publishing will use Trusted Publishing ✅"
        fi

        if [ "${{ env.base_url }}" != "https://pypi.org" ] && \
        [ "${{ steps.check-package-index.outputs.version_match }}" == 'true' ]; then
          echo "This build/release has already been published ❌"
          echo "This build/release has already been published ❌" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        elif [ "${{ steps.check-package-index.outputs.version_match }}" == 'true' ]; then
          echo "This build/release has already been published ❌"
          publish_method="Skipped"
          # Skip the rest of the logic in this step for test/development builds
          exit 0
        fi

        if [ "$publish_method" != "Trusted Publishing" ] && [ "$publish_method" != "Skipped" ]; then
          echo "Trusted publishing NOT available, using fallback methods 👇🏻"

          ### 1Password Vault Credential ###

          if [ -z "${{ inputs.OP_SERVICE_ACCOUNT_TOKEN }}" ] || [ -z "${{ inputs.ONE_PASSWORD_ITEM }}" ]; then
            echo "Unable to use 1Password to retrieve publishing key ❌"
            echo "Two required parameters MUST be set/available"
            echo "Secret:   OP_SERVICE_ACCOUNT_TOKEN"
            echo "Variable: ONE_PASSWORD_ITEM"
          else
            echo "Publishing will use 1Password vault ✅"
            publish_method="1Password Vault"
          fi

          ### GitHub Secret ###

          if [ -z "${{ inputs.PYPI_CREDENTIAL }}" ]; then
            echo "GitHub credential NOT set/available: PYPI_CREDENTIAL"
            echo "Publishing cannot continue without a valid method ❌"
            echo "Publishing cannot continue without a valid method ❌" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          elif [ "$publish_method" != "1Password Vault" ]; then
            echo "Publishing will use GitHub secret ✅"
            publish_method="GitHub Secret"
          fi

        fi

        if [ "$publish_method" != "none" ]; then
          echo "Publishing to: ${{ env.base_url }} [environment: ${{ inputs.ENVIRONMENT }}]"
          echo "publish_method=$publish_method" >> "$GITHUB_ENV"
          echo "publish_method=$publish_method" >> "$GITHUB_OUTPUT"
        fi

    - name: "Publish PyPI [Trusted Publishing]"
      # Do NOT pin to SHA just yet
      # See: https://github.com/pypa/gh-action-pypi-publish/discussions/287
      uses: pypa/gh-action-pypi-publish@fb13cb306901256ace3dab689990e13a5550ffaa # v1.11.0
      # yamllint disable-line rule:line-length
      if: steps.conditions.outputs.publish_method == 'Trusted Publishing'
      with:
        repository-url: "${{ env.publish_url }}"
        # Show checksum values
        print-hash: true
        packages-dir: ${{ env.ARTEFACT_LOCATION }}
        # We already validated earlier in the pipeline (using twine)
        verify-metadata: false
        # Optional debugging, pretty much essential for information on failures
        verbose: true
        attestations: true # Currently too buggy to enable?

    - name: "Retrieve Credential [1Password]"
      id: one-password-pypi-test
      if: steps.conditions.outputs.publish_method == '1Password Vault'
      uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2.0.0
      with:
        # Export loaded secrets as environment variables
        export-env: true
      env:
        PYPI_CREDENTIAL: "${{ inputs.ONE_PASSWORD_ITEM}}"
        OP_SERVICE_ACCOUNT_TOKEN: ${{ inputs.OP_SERVICE_ACCOUNT_TOKEN }}

    # Used only once prior to trusted publishing being configured
    - name: "Publish PyPI [1Password Credential]"
      uses: pypa/gh-action-pypi-publish@fb13cb306901256ace3dab689990e13a5550ffaa # v1.11.0
      if: steps.conditions.outputs.publish_method == '1Password Vault'
      with:
        repository-url: "${{ env.publish_url }}"
        print-hash: true
        packages-dir: ${{ env.ARTEFACT_LOCATION }}
        verify-metadata: false
        verbose: true
        # Credential retrieved from 1Password using service account
        password: "${{ env.PYPI_CREDENTIAL}}"
        attestations: false

    # Fallback method using credential stored as GitHub secret
    - name: "Publish PyPI [GitHub Secret]"
      uses: pypa/gh-action-pypi-publish@fb13cb306901256ace3dab689990e13a5550ffaa # v1.11.0
      if: steps.conditions.outputs.publish_method == 'GitHub Secret'
      with:
        repository-url: "${{ env.publish_url }}"
        print-hash: true
        packages-dir: ${{ env.ARTEFACT_LOCATION }}
        verify-metadata: false
        verbose: true
        # Publishing API key stored as secret/variable in GitHub
        password: ${{ inputs.PYPI_CREDENTIAL }}
        attestations: false

    - name: "Print summary/job output"
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Print summary/job output
        if [ "${{ steps.conditions.outputs.publish_method }}" = "Skipped" ]; then
          echo "# Publishing skipped due to existing content ⛔️" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        elif [ ${{ env.base_url }} != "https://pypi.org" ]; then
          echo "# ✅ Published successfully to ${{ env.base_url }}" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "# 🚀 Published Python package to PyPI" >> "$GITHUB_STEP_SUMMARY"
        fi
        echo "Publishing method: ${{ steps.conditions.outputs.publish_method }}"
        echo "${{ env.BASE_URL }}project/${{ steps.naming.outputs.python_project_name }}/${{ inputs.build_tag }}/" >> "$GITHUB_STEP_SUMMARY"
